* Configs in init front

#+BEGIN_SRC emacs-lisp
;; Korean Setting
;;(set-language-environment "Korean")
;;(setq default-korean-keyboard "3")
(setq input-method-verbose-flag nil input-method-highlight-flag nil)
(setq initial-scratch-message nil)
(setq column-number-mode t)
(set-keyboard-coding-system nil)


;;; package --- Summary
;;; Commentary:
;;; Begin initialization
;;; Turn off mouse interface early in startup to avoid momentary display
;;; Code:

;; 에러시 디버그모드
;; (setq debug-on-error t)

(when window-system
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1))

(setq inhibit-startup-message t)
(setq initial-scratch-message "")

(setq ad-redefinition-action 'accept) ;; 함수 redefine으로 인한 경고 생략

(set-language-environment "Korean")
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)


(setq mac-command-key-is-meta t)
(setq mac-command-modifier 'meta)

(setq echo-keystrokes 0.001) ;; 키입력시 에코창에 표시되는 딜레이 타임, 거이 없게 설정

(setq tab-width 2)

(set-variable 'cursor-type 'bar)


;;; Scroll setup
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

(setq scroll-conservatively 200) ;; 스크롤 도중에 센터로 커서 이동하지 않도록
(setq scroll-margin 3) ;; 스크롤시 남기는 여백

;; 백업들 끄기
;;(setq backup-inhibited t)
;;(setq make-backup-files nil)
;;(setq auto-save-default nil)

;; No popup frame(새버퍼열때 현재 프레임에서 열기)
(setq ns-pop-up-frames nil)
(setq pop-up-frames nil)

;; 소리 끄고 비쥬얼벨로
(setq visible-bell t)


;;; Paste setup
(defun copy-from-osx ()
  "Copy from osx."
  (shell-command-to-string "pbpaste"))

(defun paste-to-osx (text &optional push)
  (let ((process-connection-type nil))
    (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
      (process-send-string proc text)
      (process-send-eof proc))))




;; split smart!
(defun split-smart ()
  (if (< (window-pixel-width) (window-pixel-height))
      (with-selected-window (selected-window)
        (split-window-vertically))
    (with-selected-window (selected-window)
      (split-window-horizontally))))


(defcustom split-window-preferred-function 'split-smart
  "Split smart."
  :type 'function
  :version "25.1"
  :group 'windows)

(when (and window-system (eq system-type 'darwin))
  ;;(set-face-attribute 'default nil :family "Source Code Pro" :height 130 :weight 'ultra-light)
  (set-face-attribute 'default nil :family "D2Coding" :height 130 :weight 'ultra-light)
  ;;(set-face-attribute 'default nil :family "Hack" :height 130 :weight 'light)
  ;;(set-fontset-font t 'hangul (font-spec :name "나눔고딕코딩"))
  (set-fontset-font t 'hangul (font-spec :family "D2Coding"))
  ;; 풀스크린키 변경
  (define-key global-map (kbd "C-M-f") 'toggle-frame-fullscreen)

  ;; 저장키 변경
  ;;(define-key global-map (kbd "M-s") 'save-buffer)
  ;;;;; Only for OSX
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
  (unless window-system
    (setq interprogram-cut-function 'paste-to-osx)
    (setq interprogram-paste-function 'copy-from-osx))
)

(when (and window-system (eq system-type 'gnu/linux))
  (set-face-attribute 'default nil :family "D2Coding" :height 130 :weight 'ultra-light)
  ;;(set-face-attribute 'default nil :family "Hack" :height 130 :weight 'light)
  ;;(set-fontset-font t 'hangul (font-spec :name "나눔고딕코딩"))
  (set-fontset-font t 'hangul (font-spec :family "D2Coding"))
)

(when (and window-system (eq system-type 'windows-nt))
  (set-face-attribute 'default nil :family "D2Coding" :height 130 :weight 'ultra-light)
  ;;(set-face-attribute 'default nil :family "Hack" :height 130 :weight 'light)
  ;;(set-fontset-font t 'hangul (font-spec :name "나눔고딕코딩"))
  (set-fontset-font t 'hangul (font-spec :family "D2Coding"))
)

;;; default modes
;; unset some default keybinding for my custom key bindings
(define-key global-map (kbd "C-j") nil)

;; dired
(put 'dired-find-alternate-file 'disabled nil)

;; hippie-expand
;; (global-set-key "\M-n" 'hippie-expand)

;; delete highlighted region before yank
(delete-selection-mode 1)


;; (add-to-list 'load-path "~/dotfiles/my_emacs_packages")
;; (require 'upbo)
#+END_SRC

* Misc

#+BEGIN_SRC emacs-lisp
;; Changes all yes/no questions to y/n type
(fset 'yes-or-no-p 'y-or-n-p)

;; shell scripts
(setq-default sh-basic-offset 2)
(setq-default sh-indentation 2)

;; No need for ~ files when editing
(setq create-lockfiles nil)

;; Go straight to scratch buffer on startup
(setq inhibit-startup-message t)
#+END_SRC

* Shell integration

#+BEGIN_SRC emacs-lisp
;; Sets up exec-path-from shell
;; https://github.com/purcell/exec-path-from-shell
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-envs
   '("PATH")))
#+END_SRC

* Editing


#+BEGIN_SRC emacs-lisp
;; Customizations relating to editing a buffer.

;; Key binding to use "hippie expand" for text autocompletion
;; http://www.emacswiki.org/emacs/HippieExpand
(global-set-key (kbd "M-/") 'hippie-expand)

;; set Meta Space to selection

(global-set-key (kbd "M-SPC") 'set-mark-command)


;; Lisp-friendly hippie expand
(setq hippie-expand-try-functions-list
      '(try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))

;; Highlights matching parenthesis
(show-paren-mode 1)

;; Highlight current line
(global-hl-line-mode 1)

;; Interactive search key bindings. By default, C-s runs
;; isearch-forward, so this swaps the bindings.
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

;; Don't use hard tabs
(setq-default indent-tabs-mode nil)

;; When you visit a file, point goes to the last place where it
;; was when you previously visited the same file.
;; http://www.emacswiki.org/emacs/SavePlace
(require 'saveplace)
(setq-default save-place t)
;; keep track of saved places in ~/.emacs.d/places
(setq save-place-file (concat user-emacs-directory "places"))

;; Emacs can automatically create backup files. This tells Emacs to
;; put all backups in ~/.emacs.d/backups. More info:
;; http://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Files.html
(setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                               "backups"))))
(setq auto-save-default nil)

;; comments
(defun toggle-comment-on-line ()
  "comment or uncomment current line"
  (interactive)
  (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
(global-set-key (kbd "C-;") 'toggle-comment-on-line)

;; disabled by jsyang.... can not find this
;; yay rainbows!
;;(global-rainbow-delimiters-mode t)

;; use 2 spaces for tabs
(defun die-tabs ()
  (interactive)
  (set-variable 'tab-width 2)
  (mark-whole-buffer)
  (untabify (region-beginning) (region-end))
  (keyboard-quit))

;; fix weird os x kill error
(defun ns-get-pasteboard ()
  "Returns the value of the pasteboard, or nil for unsupported formats."
  (condition-case nil
      (ns-get-selection-internal 'CLIPBOARD)
    (quit nil)))

(setq electric-indent-mode nil)

;;;; Emacs extend
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :init
  (setq which-key-idle-delay 2)
  (setq which-key-max-description-length 40)
  (setq which-key-max-display-columns nil)
  (which-key-setup-side-window-bottom)
  (which-key-mode))


(defalias 'list-buffers 'ibuffer)

;; If you want to use tabbar then enable this
;; (use-package tabbar
;;   :ensure t
;;   :config
;;   (tabbar-mode 1)
;; )

;; turn back to screen split to before
(winner-mode 1)

(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    )
)

(use-package counsel
  :ensure t
  )

(use-package swiper
  :ensure try
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))

(global-set-key (kbd "C-c /") 'comment-line)
#+END_SRC

* UI

#+BEGIN_SRC emacs-lisp
;; These customizations change the way emacs looks and disable/enable
;; some user interface elements. Some useful customizations are
;; commented out, and begin with the line "CUSTOMIZE". These are more
;; a matter of preference and may require some fiddling to match your
;; preferences

;; Turn off the menu bar at the top of each frame because it's distracting
(menu-bar-mode -1)

;; Show line numbers
(global-linum-mode)

;; You can uncomment this to remove the graphical toolbar at the top. After
;; awhile, you won't need the toolbar.
;; (when (fboundp 'tool-bar-mode)
;;   (tool-bar-mode -1))

;; Don't show native OS scroll bars for buffers because they're redundant
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))

;; Color Themes
;; Read http://batsov.com/articles/2012/02/19/color-theming-in-emacs-reloaded/
;; for a great explanation of emacs color themes.
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Custom-Themes.html
;; for a more technical explanation.
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(add-to-list 'load-path "~/.emacs.d/themes")
(load-theme 'tomorrow-night-bright t)

;; increase font size for better readability
(set-face-attribute 'default nil :height 140)

;; Uncomment the lines below by removing semicolons and play with the
;; values in order to set the width (in characters wide) and height
;; (in lines high) Emacs will have whenever you start it
;; (setq initial-frame-alist '((top . 0) (left . 0) (width . 177) (height . 53)))

;; These settings relate to how emacs interacts with your operating system
(setq ;; makes killing/yanking interact with the clipboard
      x-select-enable-clipboard t

      ;; I'm actually not sure what this does but it's recommended?
      x-select-enable-primary t

      ;; Save clipboard strings into kill ring before replacing them.
      ;; When one selects something in another program to paste it into Emacs,
      ;; but kills something in Emacs before actually pasting it,
      ;; this selection is gone unless this variable is non-nil
      save-interprogram-paste-before-kill t

      ;; Shows all options when running apropos. For more info,
      ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Apropos.html
      apropos-do-all t

      ;; Mouse yank commands yank at point instead of at click.
      mouse-yank-at-point t)

;; No cursor blinking, it's distracting
(blink-cursor-mode 0)

;; full path in title bar
(setq-default frame-title-format "%b (%f)")

;; don't pop up font menu
(global-set-key (kbd "s-t") '(lambda () (interactive)))

;; no bell
(setq ring-bell-function 'ignore)

(set-face-foreground 'linum "#606060")

(setq sml/no-confirm-load-theme t)
(setq sml/theme 'smart-mode-line-powerline)
(sml/setup)

#+END_SRC

* Navigation

#+BEGIN_SRC emacs-lisp
;; These customizations make it easier for you to navigate files,
;; switch buffers, and choose options from the minibuffer.


;; "When several buffers visit identically-named files,
;; Emacs must give the buffers distinct names. The usual method
;; for making buffer names unique adds ‘<2>’, ‘<3>’, etc. to the end
;; of the buffer names (all but one of them).
;; The forward naming method includes part of the file's directory
;; name at the beginning of the buffer name
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Uniquify.html
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

;; Turn on recent file mode so that you can more easily switch to
;; recently edited files when you first start emacs
(setq recentf-save-file (concat user-emacs-directory ".recentf"))
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 40)


;; ido-mode allows you to more easily navigate choices. For example,
;; when you want to switch buffers, ido presents you with a list
;; of buffers in the the mini-buffer. As you start to type a buffer's
;; name, ido will narrow down the list of buffers to match the text
;; you've typed in
;; http://www.emacswiki.org/emacs/InteractivelyDoThings
(ido-mode t)

;; This allows partial matches, e.g. "tl" will match "Tyrion Lannister"
(setq ido-enable-flex-matching t)

;; Turn this behavior off because it's annoying
(setq ido-use-filename-at-point nil)

;; Don't try to match file across all "work" directories; only match files
;; in the current directory displayed in the minibuffer
(setq ido-auto-merge-work-directories-length -1)

;; Includes buffer names of recently open files, even if they're not
;; open now
(setq ido-use-virtual-buffers t)

;; disabled by jsyang(can not find this)
;; This enables ido in all contexts where it could be useful, not just
;; for selecting buffer and file names
;;;;;;(ido-ubiquitous-mode 1)

;; Shows a list of buffers
(global-set-key (kbd "C-x C-b") 'ibuffer)

;; Enhances M-x to allow easier execution of commands. Provides
;; a filterable list of possible commands in the minibuffer
;; http://www.emacswiki.org/emacs/Smex
(setq smex-save-file (concat user-emacs-directory ".smex-items"))
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)

;; projectile everywhere!
(require 'projectile)
(projectile-global-mode)
#+END_SRC

* For elisp editing

#+BEGIN_SRC emacs-lisp
;; Automatically load paredit when editing a lisp file
;; More at http://www.emacswiki.org/emacs/ParEdit
(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
(add-hook 'ielm-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'scheme-mode-hook           #'enable-paredit-mode)

;; eldoc-mode shows documentation in the minibuffer when writing code
;; http://www.emacswiki.org/emacs/ElDoc
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
(add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+END_SRC

* org mode configuration


#+BEGIN_SRC emacs-lisp
;; (setq org-todo-keywords '((sequence "TODO" "IN_PROGRESS" "WAITING" "DONE")))

;;;Org mode를 살리고 잘 되도록 만들어야 함... 지금은 주석처리함 
(use-package org
  :ensure t
  :bind
  (("\C-cl" . org-store-link)
   ("\C-ca" . org-agenda)
   ("\C-cc" . org-capture)
   ("\C-cb" . org-iswitchb))
  :init
  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
  (setq org-agenda-files (file-expand-wildcards "~/Documents/org/agenda/*.org"))
  (setq org-default-notes-file "~/Documents/org/agenda/index.org")
  (setq org-mobile-inbox-for-pull "~/Documents/org/agenda/index.org")
  ;; (setq org-mobile-directory "~/Dropbox/앱/MobileOrg")
  (setq org-capture-templates '(("t" "Task" entry
                                 (file+headline "~/Documents/org/agenda/index.org" "Task")
                                 "* TODO %i%? %^G")
                                ("l" "Task with link" entry
                                 (file+headline "~/Documents/org/agenda/index.org" "Task")
                                 "* TODO %i%? %^G\n%a")
                                ("q" "Task with category" entry
                                 (file+headline "~/Documents/org/agenda/index.org" "Task")
                                 "* TODO %i%? %^G\n:PROPERTIES:\n:CATEGORY: %^{PROMPT|MISC|PROJECT|SPROJECT|STUDY}\n:END:")
                                ("o" "Task @office" entry
                                 (file+headline "~/Documents/org/agenda/index.org" "Task")
                                 "* TODO %i%? :@office:")
                                ("n" "Note" entry
                                 (file+headline "~/Documents/org/agenda/index.org" "Note")
                                 "* %i%?")))

  (setq org-refile-targets '((org-agenda-files :level . 1)))
  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w@/!)" "NEXT(n!)" "|" "HOLD(h@/!)" "DONE(d)" "CANCELLED(c@/!)" "MOVED(m@/!)")))

  (setq org-agenda-custom-commands
        '(("o" "Office View"
           ((agenda "")
            (tags-todo "@office")
            (todo "WAITING")))
          ("sa" "Agenda search" search ""
           ((org-agenda-files (file-expand-wildcards "~/Documents/org/agenda/*.org"))))
          ("sd" "Document search" search ""
           ((org-agenda-files (file-expand-wildcards "~/Documents/org/note/*.org"))))))

  (setq org-babel-clojure-backend 'cider)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((js . t)
     (emacs-lisp . t)
     (clojure . t)
     ;; (typescript . t)
     (plantuml . t)
     ;; (swift . t)
     (rust . t)
     (restclient . t)))

  (setq org-agenda-restore-windows-after-quit t)

  (setq org-confirm-babel-evaluate nil)
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-src-strip-leading-and-trailing-blank-lines t)
  (setq org-log-done t)
  (setq org-edit-src-content-indentation 0)
  (setq org-adapt-indentation nil)

  (eval-after-load "org"
    '(require 'ox-gfm nil t))
  (setq org-plantuml-jar-path
        (expand-file-name "~/bin/plantuml.jar"))

  ;;yasnippet 하고 tab 충돌 해결
  (defun yas/org-very-safe-expand ()
    (let ((yas-fallback-behavior 'return-nil)) (yas-expand)))

  (add-hook 'org-mode-hook
            (lambda ()
              (make-variable-buffer-local 'yas-expand-from-trigger-key)
              (setq yas-expand-from-trigger-key [tab])
              (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
              (define-key yas/keymap [tab] 'yas-next-field)))

  ;; org에서 linewrap 되게
  (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
  :config
  (define-key org-mode-map (kbd "C-j") nil)
  (define-key org-mode-map (kbd "M-j") 'org-return-indent)
  (define-key org-mode-map (kbd "<return>") 'org-return-indent)
)

;; Have to install
(use-package org-tree-slide
 :ensure t)

(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))



(when (require 'org-tree-slide nil t)
  (global-set-key (kbd "<f8>") 'org-tree-slide-mode)
  (global-set-key (kbd "S-<f8>") 'org-tree-slide-skip-done-toggle)
  (org-tree-slide-simple-profile))

;; (setq org-tree-slide-skip-outline-level 4)
#+END_SRC

* Yasnippet configuration

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config 
  ( use-package yasnippet-snippets
    :ensure t)
  (yas-reload-all)
)

(add-hook 'python-mode-hook 'yas-minor-mode)
(add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)

#+END_SRC

* For gitgutter configuration
** for more configuration : https://github.com/syohex/emacs-git-gutter
#+begin_src emacs-lisp
;;(require 'git-gutter)
;;(global-git-gutter-mode t)
#+end_src

* For magit configuration
#+BEGIN_SRC emacs-lisp
(defun auto-commit-files (list)
  (interactive
   (list (list (buffer-file-name (current-buffer)))))
  "LIST to be auto commit"
  (while list
    (let* ((file (car list))
           (file-buffer (get-file-buffer file)))
      (when file-buffer
        (set-buffer file-buffer)
        (when (magit-anything-modified-p nil file)
          (magit-call-git "add" file)
          (magit-call-git "commit" "-m" (concat file " update"))
          (magit-call-git "push" "origin")
          (magit-refresh)
          (print (concat file " is pushed!!!")))))
    (setq list (cdr list))))

(use-package magit
  :commands magit-get-top-dir
  :diminish auto-revert-mode
  :ensure t
  :init
  ;; magit 오토 리버트시 버퍼의 브랜치명까지 갱신하도록
  (setq auto-revert-check-vc-info t)
  (with-eval-after-load 'info
    (info-initialize)
    (add-to-list 'Info-directory-list
                 "~/.emacs.d/site-lisp/magit/Documentation/"))
  ;;; 이맥스가 기본적으로 제공하는 Git 백엔드를 켜두면 매우 느려진다. magit만 쓴다.
  (setq vc-handled-backends nil)
  :config
  (setq vc-follow-symlinks t)
  (setq find-file-visit-truename t)
  (setq magit-refresh-status-buffer 'switch-to-buffer)
  (setq magit-rewrite-inclusive 'ask)
  (setq magit-save-some-buffers t)
  (setq magit-set-upstream-on-push 'askifnotset)
  :bind
  ("C-c m" . magit-status))
#+END_SRC


* elpy, jedi, python, flycheck configuration

#+BEGIN_SRC emacs-lisp
;;company-mode global activation
(add-hook 'after-init-hook 'global-company-mode)

;;(pyenv-mode)
(elpy-enable)

(defun my/python-mode-hook ()
  (add-to-list 'company-backends 'company-jedi))

(add-hook 'python-mode-hook 'my/python-mode-hook)

;; enabled this block
(require 'jedi-core)
(setq jedi:complete-on-dot t)
(setq jedi:use-shortcuts t)
(add-hook 'python-mode-hook 'jedi:setup)
(add-to-list 'company-backends 'company-jedi)

;;this two line will fix some key bidning error in elpy(in youtuble)
(define-key yas-minor-mode-map (kbd "C-c k") 'yas-expand)
(define-key global-map (kbd "C-c o") 'iedit-mode)

(defvar jedi-config:vcs-root-sentinel ".git")
(defvar jedi-config:python-module-sentinel "__init__.py")

(defun jedi-config:setup-keys ()
  (local-set-key (kbd "M-.") 'jedi:key-goto-definition)
  (local-set-key (kbd "M-,") 'jedi:key-goto-definition-pop-marker)
  (local-set-key (kbd "M-?") 'jedi:show-doc)
  (local-set-key (kbd "M-/") 'jedi:get-in-function-call)
)

(add-hook 'python-mode-hook 'jedi-config:setup-keys)
(setq jedi:get-in-function-call-timeout 10000000)
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))
(require 'py-autopep8)
(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
(add-hook 'python-mode-hook (lambda ()
                              (require 'sphinx-doc)
                              (sphinx-doc-mode t)))
(require 'flycheck-mypy)
(add-hook 'python-mode-hook 'flycheck-mode)


(setq flycheck-check-syntax-automatically '(save mode-enable))
;; the default value was '(save idle-change new-line mode-enabled)
#+END_SRC

* other programming config

#+BEGIN_SRC emacs-lisp
;;; markdown mode
(use-package markdown-mode
 :ensure t
 :commands (markdown-mode gfm-mode)
 :mode (("README\\.md\\'" . gfm-mode)
        ("\\.md\\'" . markdown-mode)
        ("\\.markdown\\'" . markdown-mode))
 :init (setq markdown-command "multimarkdown"))

(use-package ein
  :ensure t)

;;
;; (defun cljs-node-repl ()
;;   (interactive)
;;   (inf-clojure "lein trampoline run -m clojure.main /Users/jungseungyang/.emacs.d/repl.clj"))

(defun figwheel-repl ()
  (interactive)
  (inf-clojure "lein figwheel"))

(add-hook 'clojure-mode-hook #'inf-clojure-minor-mode)

(add-to-list 'load-path "~/.emacs.d/elib")
(load "coverage-mode")

;; code checking via flymake
;; set code checker here from "epylint", "pyflakes"
;; (setq pycodechecker "pyflakes")
;; (when (load "flymake" t)
;;   (defun flymake-pycodecheck-init ()
;;     (let* ((temp-file (flymake-init-create-temp-buffer-copy
;;                        'flymake-create-temp-inplace))
;;            (local-file (file-relative-name
;;                         temp-file
;;                         (file-name-directory buffer-file-name))))
;;       (list pycodechecker (list local-file))))
;;   (add-to-list 'flymake-allowed-file-name-masks
;;                '("\\.py\\'" flymake-pycodecheck-init)))

#+END_SRC

* Clojure setup


#+BEGIN_SRC emacs-lisp

;;;;
;; Clojure
;;;;

;;Clojure setup
(use-package cider
 :ensure t
 :init
 (add-hook 'cider-repl-mode-hook #'company-mode)
 (add-hook 'cider-mode-hook #'company-mode))

(use-package clojure-mode
 :ensure t)

;; Enable paredit for Clojure
(add-hook 'clojure-mode-hook 'enable-paredit-mode)

;; This is useful for working with camel-case tokens, like names of
;; Java classes (e.g. JavaClassName)
(add-hook 'clojure-mode-hook 'subword-mode)

;; A little more syntax highlighting
(require 'clojure-mode-extra-font-locking)

;; syntax hilighting for midje
(add-hook 'clojure-mode-hook
          (lambda ()
            (setq inferior-lisp-program "lein repl")
            (font-lock-add-keywords
             nil
             '(("(\\(facts?\\)"
                (1 font-lock-keyword-face))
               ("(\\(background?\\)"
                (1 font-lock-keyword-face))))
            (define-clojure-indent (fact 1))
            (define-clojure-indent (facts 1))))

;;;;
;; Cider
;;;;

;; provides minibuffer documentation for the code you're typing into the repl
(add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)

;; go right to the REPL buffer when it's finished connecting
(setq cider-repl-pop-to-buffer-on-connect t)

;; When there's a cider error, show its buffer and switch to it
(setq cider-show-error-buffer t)
(setq cider-auto-select-error-buffer t)

;; Where to store the cider history.
(setq cider-repl-history-file "~/.emacs.d/cider-history")

;; Wrap when navigating history.
(setq cider-repl-wrap-history t)

;; enable paredit in your REPL
(add-hook 'cider-repl-mode-hook 'paredit-mode)

;; Use clojure mode for other extensions
(add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))
(add-to-list 'auto-mode-alist '("\\.boot$" . clojure-mode))
(add-to-list 'auto-mode-alist '("\\.cljs.*$" . clojure-mode))
(add-to-list 'auto-mode-alist '("lein-env" . enh-ruby-mode))


;; key bindings
;; these help me out with the way I usually develop web apps
(defun cider-start-http-server ()
  (interactive)
  (cider-load-current-buffer)
  (let ((ns (cider-current-ns)))
    (cider-repl-set-ns ns)
    (cider-interactive-eval (format "(println '(def server (%s/start))) (println 'server)" ns))
    (cider-interactive-eval (format "(def server (%s/start)) (println server)" ns))))


(defun cider-refresh ()
  (interactive)
  (cider-interactive-eval (format "(user/reset)")))

(defun cider-user-ns ()
  (interactive)
  (cider-repl-set-ns "user"))

(eval-after-load 'cider
  '(progn
     (define-key clojure-mode-map (kbd "C-c C-v") 'cider-start-http-server)
     (define-key clojure-mode-map (kbd "C-M-r") 'cider-refresh)
     (define-key clojure-mode-map (kbd "C-c u") 'cider-user-ns)
     (define-key clojure-mode-map (kbd "C-x C-e") 'cider-eval-last-sexp)
     (define-key cider-mode-map (kbd "C-c u") 'cider-user-ns)))

#+END_SRC

* Java script related configuration

#+BEGIN_SRC emacs-lisp
;; javascript / html
(add-to-list 'auto-mode-alist '("\\.js$" . js-mode))
(add-hook 'js-mode-hook 'subword-mode)
(add-hook 'html-mode-hook 'subword-mode)
(setq js-indent-level 2)
(eval-after-load "sgml-mode"
  '(progn
     (require 'tagedit)
     (tagedit-add-paredit-like-keybindings)
     (add-hook 'html-mode-hook (lambda () (tagedit-mode 1)))))


;; coffeescript
(add-to-list 'auto-mode-alist '("\\.coffee.erb$" . coffee-mode))
(add-hook 'coffee-mode-hook 'subword-mode)
(add-hook 'coffee-mode-hook 'highlight-indentation-current-column-mode)
(add-hook 'coffee-mode-hook
          (defun coffee-mode-newline-and-indent ()
            (define-key coffee-mode-map "\C-j" 'coffee-newline-and-indent)
            (setq coffee-cleanup-whitespace nil)))
(custom-set-variables
 '(coffee-tab-width 2))
#+END_SRC

* Others


#+BEGIN_SRC emacs-lisp
;; 이부분은 ssh 연결에 사용함
(require 'ssh)
(add-hook 'ssh-mode-hook
          (lambda ()
            (setq ssh-directory-tracking-mode t)
            (shell-dirtrack-mode t)
            (setq dirtrackp nil)))


;;(add-to-list 'exec-path "/usr/local/bin")

;; for custom themes
;;(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
;;(add-to-list 'load-path "~/.emacs.d/themes")  


;;; Utilities
;; (use-package google-translate
;;  :ensure t
;;  :init
;;  (require 'google-translate)
;;  (require 'google-translate-smooth-ui)
;;  (setq google-translate-translation-directions-alist
;;        '(("en" . "ko") ("ko" . "en")))
;;  (setq google-translate-pop-up-buffer-set-focus t)
;;  (setq google-translate-output-destination 'echo-area)
;;  (setq max-mini-window-height 0.5)
;;  :bind
;;  ("C-c n" . google-translate-smooth-translate))

;;(use-package beacon
;;  :ensure t
;;  :diminish beacon-mode
;;  :config
;;  (beacon-mode 1))

;;; Tools

;;;have to install
;;(use-package ox-reveal
;;  :ensure t
;;  :init
;;  (setq org-reveal-root "https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.3.0/"))

;;;have to install
;;(use-package ob-restclient
;;  :ensure t)


;;; multi term이 사용 가능하도록 확인 (shell로 zsh를 써야 하는지?)
;; (use-package multi-term
;;   :ensure t
;;   :init
;;   (setq multi-term-program "/bin/zsh")
;;   :bind
;;   ("C-c i" . multi-term))

;; terminal(멀티텀포함)에서 C-j를 글로벌 맵이용하도록 훅
;; (add-hook 'term-mode-hook
;;           (lambda ()
;;             (define-key term-raw-map (kbd "C-j")
;;                (lookup-key (current-global-map) (kbd "C-j")))))

;;;
;; (use-package prodigy
;;   :ensure t
;;   :bind
;;   ("C-c f" . prodigy)
;;   :init
;;   (prodigy-define-service
;;     :name "tui.chart dev server"
;;     :command "npm"
;;     :cwd "~/masterpiece/tui.chart"
;;     :args '("run" "dev")
;;     :port 8080
;;     :stop-signal 'sigkill
;;     :kill-process-buffer-on-stop t
;;     :tags '(webpack-server))

;;   (prodigy-define-service
;;     :name "tui.chart test"
;;     :command "npm"
;;     :cwd "~/masterpiece/toast-beuaty"
;;     :args '("run" "test")
;;     :stop-signal 'sigkill
;;     :kill-process-buffer-on-stop t
;;     :tags '(karma))

;;   (prodigy-define-service
;;     :name "wysiwyg contents editor"
;;     :command "npm"
;;     :cwd "~/masterpiece/wce"
;;     :args '("run" "dev")
;;     :port 8080
;;     :stop-signal 'sigkill
;;     :kill-process-buffer-on-stop t
;;     :tags '(webpack-server))

;;   (prodigy-define-service
;;     :name "toast drive dev server"
;;     :command "npm"
;;     :cwd "~/masterpiece/toast-drive-web-service"
;;     :args '("run" "dev")
;;     :port 3000
;;     :stop-signal 'sigkill
;;     :kill-process-buffer-on-stop t
;;     :tags '(webpack-server))

;;   (prodigy-define-service
;;     :name "toast drive alpha server"
;;     :command "npm"
;;     :cwd "~/masterpiece/toast-drive-web-service"
;;     :args '("run" "alpha")
;;     :port 3000
;;     :stop-signal 'sigkill
;;     :kill-process-buffer-on-stop t
;;     :tags '(webpack-server))

;;   (prodigy-define-tag
;;     :name 'webpack-server
;;     :ready-message "Http://0.0.0.0:[0-9]+/webpack-dev-server/")

;;   (prodigy-define-tag
;;     :name 'karma
;;     :ready-message " Executed [0-9]+ of [0-9]+ .+")

;;   (prodigy-define-tag
;;     :name 'gulp-watch
;;     :ready-message "Finished 'watch'")

;;   (prodigy-define-tag
;;     :name 'tomcat
;;     :ready-message "Running war on http://localhost:[0-9]+/"))

(use-package wttrin
  :ensure t
  :init
  (setq wttrin-default-accept-language '("Accept-Language" . "ko-KR")))

;; (use-package restclient
;;   :ensure t)

#+END_SRC
